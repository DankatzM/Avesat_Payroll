import { useState, useEffect } from 'react';
import { useAuth } from '@/contexts/AuthContext';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Avatar, AvatarFallback } from '@/components/ui/avatar';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@/components/ui/dialog';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';
import {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';
import {\n  Plus,\n  Search,\n  Filter,\n  MoreHorizontal,\n  Edit,\n  Trash2,\n  Users,\n  Mail,\n  Phone,\n  MapPin,\n  Calendar,\n  Building2,\n} from 'lucide-react';
import { Employee, PayrollCategory, UserRole } from '@shared/api';

interface EmployeeFormData {\n  firstName: string;\n  lastName: string;\n  email: string;\n  phone: string;\n  address: string;\n  dateOfBirth: string;\n  hireDate: string;\n  position: string;\n  department: string;\n  salary: number;\n  payrollCategory: PayrollCategory;\n  bankName: string;\n  accountNumber: string;\n  sortCode: string;\n  accountHolderName: string;\n  taxNumber: string;\n  taxCode: string;\n  isStudentLoan: boolean;\n  pensionContribution: number;\n}\n\nexport default function Employees() {\n  const { hasAnyRole } = useAuth();\n  const [employees, setEmployees] = useState<Employee[]>([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedDepartment, setSelectedDepartment] = useState('all');\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [editingEmployee, setEditingEmployee] = useState<Employee | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const [formData, setFormData] = useState<EmployeeFormData>({\n    firstName: '',\n    lastName: '',\n    email: '',\n    phone: '',\n    address: '',\n    dateOfBirth: '',\n    hireDate: '',\n    position: '',\n    department: '',\n    salary: 0,\n    payrollCategory: PayrollCategory.MONTHLY,\n    bankName: '',\n    accountNumber: '',\n    sortCode: '',\n    accountHolderName: '',\n    taxNumber: '',\n    taxCode: '',\n    isStudentLoan: false,\n    pensionContribution: 0,\n  });\n\n  useEffect(() => {\n    fetchEmployees();\n  }, []);\n\n  const fetchEmployees = async () => {\n    try {\n      // Mock data for demonstration\n      const mockEmployees: Employee[] = [\n        {\n          id: '1',\n          employeeNumber: 'EMP001',\n          firstName: 'John',\n          lastName: 'Doe',\n          email: 'john.doe@company.com',\n          phone: '+1 (555) 123-4567',\n          address: '123 Main St, City, State 12345',\n          dateOfBirth: '1990-05-15',\n          hireDate: '2022-01-15',\n          position: 'Software Engineer',\n          department: 'Engineering',\n          salary: 75000,\n          payrollCategory: PayrollCategory.MONTHLY,\n          bankDetails: {\n            bankName: 'Bank of America',\n            accountNumber: '1234567890',\n            sortCode: '123456',\n            accountHolderName: 'John Doe',\n          },\n          taxInformation: {\n            taxNumber: 'TIN123456789',\n            taxCode: 'T1',\n            isStudentLoan: false,\n            pensionContribution: 5,\n          },\n          isActive: true,\n          createdAt: '2022-01-15T00:00:00Z',\n          updatedAt: '2024-03-15T00:00:00Z',\n        },\n        {\n          id: '2',\n          employeeNumber: 'EMP002',\n          firstName: 'Jane',\n          lastName: 'Smith',\n          email: 'jane.smith@company.com',\n          phone: '+1 (555) 987-6543',\n          address: '456 Oak Ave, City, State 12345',\n          dateOfBirth: '1988-08-22',\n          hireDate: '2021-06-01',\n          position: 'Marketing Manager',\n          department: 'Marketing',\n          salary: 65000,\n          payrollCategory: PayrollCategory.MONTHLY,\n          bankDetails: {\n            bankName: 'Wells Fargo',\n            accountNumber: '9876543210',\n            sortCode: '654321',\n            accountHolderName: 'Jane Smith',\n          },\n          taxInformation: {\n            taxNumber: 'TIN987654321',\n            taxCode: 'T1',\n            isStudentLoan: true,\n            pensionContribution: 6,\n          },\n          isActive: true,\n          createdAt: '2021-06-01T00:00:00Z',\n          updatedAt: '2024-03-15T00:00:00Z',\n        },\n        {\n          id: '3',\n          employeeNumber: 'EMP003',\n          firstName: 'Michael',\n          lastName: 'Johnson',\n          email: 'michael.johnson@company.com',\n          phone: '+1 (555) 555-1234',\n          address: '789 Pine St, City, State 12345',\n          dateOfBirth: '1985-12-10',\n          hireDate: '2020-03-15',\n          position: 'Sales Director',\n          department: 'Sales',\n          salary: 85000,\n          payrollCategory: PayrollCategory.MONTHLY,\n          bankDetails: {\n            bankName: 'Chase Bank',\n            accountNumber: '5555555555',\n            sortCode: '555555',\n            accountHolderName: 'Michael Johnson',\n          },\n          taxInformation: {\n            taxNumber: 'TIN555555555',\n            taxCode: 'T2',\n            isStudentLoan: false,\n            pensionContribution: 8,\n          },\n          isActive: true,\n          createdAt: '2020-03-15T00:00:00Z',\n          updatedAt: '2024-03-15T00:00:00Z',\n        },\n      ];\n      setEmployees(mockEmployees);\n    } catch (error) {\n      console.error('Failed to fetch employees:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const departments = ['all', 'Engineering', 'Marketing', 'Sales', 'HR', 'Finance'];\n\n  const filteredEmployees = employees.filter(employee => {\n    const matchesSearch = `${employee.firstName} ${employee.lastName} ${employee.email} ${employee.employeeNumber}`\n      .toLowerCase()\n      .includes(searchTerm.toLowerCase());\n    const matchesDepartment = selectedDepartment === 'all' || employee.department === selectedDepartment;\n    return matchesSearch && matchesDepartment;\n  });\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n    }).format(amount);\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US');\n  };\n\n  const resetForm = () => {\n    setFormData({\n      firstName: '',\n      lastName: '',\n      email: '',\n      phone: '',\n      address: '',\n      dateOfBirth: '',\n      hireDate: '',\n      position: '',\n      department: '',\n      salary: 0,\n      payrollCategory: PayrollCategory.MONTHLY,\n      bankName: '',\n      accountNumber: '',\n      sortCode: '',\n      accountHolderName: '',\n      taxNumber: '',\n      taxCode: '',\n      isStudentLoan: false,\n      pensionContribution: 0,\n    });\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    try {\n      // In real app, make API call\n      console.log('Submitting employee data:', formData);\n      \n      // Mock success\n      const newEmployee: Employee = {\n        id: Date.now().toString(),\n        employeeNumber: `EMP${String(employees.length + 1).padStart(3, '0')}`,\n        ...formData,\n        bankDetails: {\n          bankName: formData.bankName,\n          accountNumber: formData.accountNumber,\n          sortCode: formData.sortCode,\n          accountHolderName: formData.accountHolderName,\n        },\n        taxInformation: {\n          taxNumber: formData.taxNumber,\n          taxCode: formData.taxCode,\n          isStudentLoan: formData.isStudentLoan,\n          pensionContribution: formData.pensionContribution,\n        },\n        isActive: true,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n      };\n      \n      setEmployees([...employees, newEmployee]);\n      setIsAddDialogOpen(false);\n      resetForm();\n    } catch (error) {\n      console.error('Failed to create employee:', error);\n    }\n  };\n\n  const handleEdit = (employee: Employee) => {\n    setEditingEmployee(employee);\n    setFormData({\n      firstName: employee.firstName,\n      lastName: employee.lastName,\n      email: employee.email,\n      phone: employee.phone,\n      address: employee.address,\n      dateOfBirth: employee.dateOfBirth,\n      hireDate: employee.hireDate,\n      position: employee.position,\n      department: employee.department,\n      salary: employee.salary,\n      payrollCategory: employee.payrollCategory,\n      bankName: employee.bankDetails.bankName,\n      accountNumber: employee.bankDetails.accountNumber,\n      sortCode: employee.bankDetails.sortCode,\n      accountHolderName: employee.bankDetails.accountHolderName,\n      taxNumber: employee.taxInformation.taxNumber,\n      taxCode: employee.taxInformation.taxCode,\n      isStudentLoan: employee.taxInformation.isStudentLoan,\n      pensionContribution: employee.taxInformation.pensionContribution,\n    });\n    setIsEditDialogOpen(true);\n  };\n\n  const handleDelete = async (employeeId: string) => {\n    if (confirm('Are you sure you want to delete this employee?')) {\n      try {\n        // In real app, make API call\n        setEmployees(employees.filter(emp => emp.id !== employeeId));\n      } catch (error) {\n        console.error('Failed to delete employee:', error);\n      }\n    }\n  };\n\n  const canManageEmployees = hasAnyRole([UserRole.ADMIN, UserRole.HR_MANAGER, UserRole.PAYROLL_OFFICER]);\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"animate-pulse space-y-6\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/4\"></div>\n          <div className=\"h-64 bg-gray-200 rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  const EmployeeForm = () => (\n    <form onSubmit={handleSubmit} className=\"space-y-6\">\n      {/* Personal Information */}\n      <div className=\"space-y-4\">\n        <h3 className=\"text-lg font-medium\">Personal Information</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"firstName\">First Name</Label>\n            <Input\n              id=\"firstName\"\n              value={formData.firstName}\n              onChange={(e) => setFormData({...formData, firstName: e.target.value})}\n              required\n            />\n          </div>\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"lastName\">Last Name</Label>\n            <Input\n              id=\"lastName\"\n              value={formData.lastName}\n              onChange={(e) => setFormData({...formData, lastName: e.target.value})}\n              required\n            />\n          </div>\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"email\">Email</Label>\n            <Input\n              id=\"email\"\n              type=\"email\"\n              value={formData.email}\n              onChange={(e) => setFormData({...formData, email: e.target.value})}\n              required\n            />\n          </div>\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"phone\">Phone</Label>\n            <Input\n              id=\"phone\"\n              value={formData.phone}\n              onChange={(e) => setFormData({...formData, phone: e.target.value})}\n              required\n            />\n          </div>\n          <div className=\"space-y-2 md:col-span-2\">\n            <Label htmlFor=\"address\">Address</Label>\n            <Textarea\n              id=\"address\"\n              value={formData.address}\n              onChange={(e) => setFormData({...formData, address: e.target.value})}\n              required\n            />\n          </div>\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"dateOfBirth\">Date of Birth</Label>\n            <Input\n              id=\"dateOfBirth\"\n              type=\"date\"\n              value={formData.dateOfBirth}\n              onChange={(e) => setFormData({...formData, dateOfBirth: e.target.value})}\n              required\n            />\n          </div>\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"hireDate\">Hire Date</Label>\n            <Input\n              id=\"hireDate\"\n              type=\"date\"\n              value={formData.hireDate}\n              onChange={(e) => setFormData({...formData, hireDate: e.target.value})}\n              required\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Employment Information */}\n      <div className=\"space-y-4\">\n        <h3 className=\"text-lg font-medium\">Employment Information</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"position\">Position</Label>\n            <Input\n              id=\"position\"\n              value={formData.position}\n              onChange={(e) => setFormData({...formData, position: e.target.value})}\n              required\n            />\n          </div>\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"department\">Department</Label>\n            <Select\n              value={formData.department}\n              onValueChange={(value) => setFormData({...formData, department: value})}\n            >\n              <SelectTrigger>\n                <SelectValue placeholder=\"Select department\" />\n              </SelectTrigger>\n              <SelectContent>\n                {departments.filter(dept => dept !== 'all').map(dept => (\n                  <SelectItem key={dept} value={dept}>{dept}</SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"salary\">Annual Salary</Label>\n            <Input\n              id=\"salary\"\n              type=\"number\"\n              value={formData.salary}\n              onChange={(e) => setFormData({...formData, salary: Number(e.target.value)})}\n              required\n            />\n          </div>\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"payrollCategory\">Payroll Category</Label>\n            <Select\n              value={formData.payrollCategory}\n              onValueChange={(value) => setFormData({...formData, payrollCategory: value as PayrollCategory})}\n            >\n              <SelectTrigger>\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value={PayrollCategory.MONTHLY}>Monthly</SelectItem>\n                <SelectItem value={PayrollCategory.WEEKLY}>Weekly</SelectItem>\n                <SelectItem value={PayrollCategory.HOURLY}>Hourly</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n      </div>\n\n      {/* Bank Details */}\n      <div className=\"space-y-4\">\n        <h3 className=\"text-lg font-medium\">Bank Details</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"bankName\">Bank Name</Label>\n            <Input\n              id=\"bankName\"\n              value={formData.bankName}\n              onChange={(e) => setFormData({...formData, bankName: e.target.value})}\n              required\n            />\n          </div>\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"accountHolderName\">Account Holder Name</Label>\n            <Input\n              id=\"accountHolderName\"\n              value={formData.accountHolderName}\n              onChange={(e) => setFormData({...formData, accountHolderName: e.target.value})}\n              required\n            />\n          </div>\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"accountNumber\">Account Number</Label>\n            <Input\n              id=\"accountNumber\"\n              value={formData.accountNumber}\n              onChange={(e) => setFormData({...formData, accountNumber: e.target.value})}\n              required\n            />\n          </div>\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"sortCode\">Sort Code</Label>\n            <Input\n              id=\"sortCode\"\n              value={formData.sortCode}\n              onChange={(e) => setFormData({...formData, sortCode: e.target.value})}\n              required\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Tax Information */}\n      <div className=\"space-y-4\">\n        <h3 className=\"text-lg font-medium\">Tax Information</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"taxNumber\">Tax Number</Label>\n            <Input\n              id=\"taxNumber\"\n              value={formData.taxNumber}\n              onChange={(e) => setFormData({...formData, taxNumber: e.target.value})}\n              required\n            />\n          </div>\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"taxCode\">Tax Code</Label>\n            <Input\n              id=\"taxCode\"\n              value={formData.taxCode}\n              onChange={(e) => setFormData({...formData, taxCode: e.target.value})}\n              required\n            />\n          </div>\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"pensionContribution\">Pension Contribution (%)</Label>\n            <Input\n              id=\"pensionContribution\"\n              type=\"number\"\n              min=\"0\"\n              max=\"100\"\n              step=\"0.1\"\n              value={formData.pensionContribution}\n              onChange={(e) => setFormData({...formData, pensionContribution: Number(e.target.value)})}\n              required\n            />\n          </div>\n        </div>\n      </div>\n\n      <div className=\"flex justify-end space-x-2\">\n        <Button\n          type=\"button\"\n          variant=\"outline\"\n          onClick={() => {\n            setIsAddDialogOpen(false);\n            setIsEditDialogOpen(false);\n            resetForm();\n          }}\n        >\n          Cancel\n        </Button>\n        <Button type=\"submit\" className=\"bg-indigo-600 hover:bg-indigo-700\">\n          {editingEmployee ? 'Update Employee' : 'Add Employee'}\n        </Button>\n      </div>\n    </form>\n  );\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">Employee Management</h1>\n          <p className=\"mt-1 text-sm text-gray-600\">\n            Manage employee information, payroll details, and bank information\n          </p>\n        </div>\n        {canManageEmployees && (\n          <div className=\"mt-4 sm:mt-0\">\n            <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n              <DialogTrigger asChild>\n                <Button className=\"bg-indigo-600 hover:bg-indigo-700\">\n                  <Plus className=\"mr-2 h-4 w-4\" />\n                  Add Employee\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n                <DialogHeader>\n                  <DialogTitle>Add New Employee</DialogTitle>\n                </DialogHeader>\n                <EmployeeForm />\n              </DialogContent>\n            </Dialog>\n          </div>\n        )}\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Employees</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{employees.length}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {employees.filter(emp => emp.isActive).length} active\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Departments</CardTitle>\n            <Building2 className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {new Set(employees.map(emp => emp.department)).size}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">Active departments</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Average Salary</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {formatCurrency(employees.reduce((sum, emp) => sum + emp.salary, 0) / employees.length || 0)}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">Across all employees</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardContent className=\"pt-6\">\n          <div className=\"flex flex-col sm:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                <Input\n                  placeholder=\"Search employees...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n            <Select value={selectedDepartment} onValueChange={setSelectedDepartment}>\n              <SelectTrigger className=\"w-full sm:w-48\">\n                <Filter className=\"mr-2 h-4 w-4\" />\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                {departments.map(dept => (\n                  <SelectItem key={dept} value={dept}>\n                    {dept === 'all' ? 'All Departments' : dept}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Employee Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Employees ({filteredEmployees.length})</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Employee</TableHead>\n                <TableHead>Position</TableHead>\n                <TableHead>Department</TableHead>\n                <TableHead>Salary</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Hire Date</TableHead>\n                {canManageEmployees && <TableHead>Actions</TableHead>}\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {filteredEmployees.map((employee) => (\n                <TableRow key={employee.id}>\n                  <TableCell>\n                    <div className=\"flex items-center space-x-3\">\n                      <Avatar className=\"h-8 w-8\">\n                        <AvatarFallback className=\"bg-indigo-100 text-indigo-700\">\n                          {employee.firstName.charAt(0)}{employee.lastName.charAt(0)}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div>\n                        <div className=\"font-medium\">\n                          {employee.firstName} {employee.lastName}\n                        </div>\n                        <div className=\"text-sm text-gray-500\">\n                          {employee.employeeNumber}\n                        </div>\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell>{employee.position}</TableCell>\n                  <TableCell>{employee.department}</TableCell>\n                  <TableCell>{formatCurrency(employee.salary)}</TableCell>\n                  <TableCell>\n                    <Badge \n                      variant={employee.isActive ? \"default\" : \"secondary\"}\n                      className={employee.isActive ? \"bg-green-100 text-green-800\" : \"\"}\n                    >\n                      {employee.isActive ? 'Active' : 'Inactive'}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>{formatDate(employee.hireDate)}</TableCell>\n                  {canManageEmployees && (\n                    <TableCell>\n                      <DropdownMenu>\n                        <DropdownMenuTrigger asChild>\n                          <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n                            <MoreHorizontal className=\"h-4 w-4\" />\n                          </Button>\n                        </DropdownMenuTrigger>\n                        <DropdownMenuContent align=\"end\">\n                          <DropdownMenuItem onClick={() => handleEdit(employee)}>\n                            <Edit className=\"mr-2 h-4 w-4\" />\n                            Edit\n                          </DropdownMenuItem>\n                          <DropdownMenuItem \n                            onClick={() => handleDelete(employee.id)}\n                            className=\"text-red-600\"\n                          >\n                            <Trash2 className=\"mr-2 h-4 w-4\" />\n                            Delete\n                          </DropdownMenuItem>\n                        </DropdownMenuContent>\n                      </DropdownMenu>\n                    </TableCell>\n                  )}\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n\n      {/* Edit Dialog */}\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Edit Employee</DialogTitle>\n          </DialogHeader>\n          <EmployeeForm />\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}"